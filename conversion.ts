import type { CueSheet } from "./cuesheet.ts";
import { type CueFormatId, formats } from "./formats.ts";

/**
 * Parses a cue sheet with the given format.
 *
 * @param content Serialized content of the cue sheet.
 * @param formatId ID of the input format.
 * @returns Parsed cue sheet or `undefined` if the given format has no parser.
 */
export function parseCueSheet(
  content: string,
  formatId: CueFormatId,
): CueSheet | undefined {
  return formats[formatId].parse?.(content);
}

/**
 * Serializes a cue sheet into the given format.
 *
 * If no cue sheet formatter exists, a cue sheet will be generated by joining
 * the individual formatted cues together with newlines.
 *
 * @param cueSheet Cue sheet object.
 * @param formatId ID of the output format.
 * @returns Serialized cue sheet or `undefined` if the given format has neither
 * a cue sheet nor a cue formatter.
 */
export function formatCueSheet(
  cueSheet: CueSheet,
  formatId: CueFormatId,
): string | undefined {
  const { format, formatCue } = formats[formatId];
  if (format) {
    return format(cueSheet);
  } else if (formatCue) {
    return cueSheet.cues.map(formatCue).join("\n");
  } else {
    return undefined;
  }
}
